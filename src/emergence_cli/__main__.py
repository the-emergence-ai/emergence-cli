import os, pathlib, shutil, textwrap, json, sys
import click
import subprocess  # 👈 for docker build & push
import requests     # ✅ NEW for directory ping
from . import __version__

@click.group()
@click.version_option(__version__)
def cli():
    """Emergence command‑line tool."""
    pass

@cli.command()
@click.argument("name")
def init(name: str):
    """
    Scaffold a **hello‑agent** in a new folder called NAME.
    """
    target = pathlib.Path(name).resolve()
    if target.exists():
        click.secho("Folder already exists — aborting.", fg="red")
        raise SystemExit(1)

    agent_py = textwrap.dedent(
        f"""\
        \"\"\"Echo agent generated by Emergence CLI.\"\"\"
        import json, sys

        def handle(msg: dict) -> dict:
            \"\"\"Very first prototype — just echoes HELP prompts.\"\"\"
            if msg.get("verb") == "HELP":
                return {{
                    "id": msg["id"],
                    "from": "{name}",
                    "to": msg["from"],
                    "verb": "DONE",
                    "data": {{"echo": msg["data"]}}
                }}
            raise ValueError("Unsupported verb")

        if __name__ == "__main__":
            incoming = json.load(sys.stdin)
            json.dump(handle(incoming), sys.stdout)
        """
    )

    dockerfile = textwrap.dedent(
        """\
        FROM python:3.11-slim
        WORKDIR /app
        COPY agent.py .
        CMD ["python", "agent.py"]
        """
    )

    readme = f"# {name}\n\nMinimal echo agent generated by **Emergence CLI**."

    target.mkdir()
    (target / "agent.py").write_text(agent_py)
    (target / "Dockerfile").write_text(dockerfile)
    (target / "README.md").write_text(readme)

    click.secho(f"✅  Scaffolding created in ./{name}", fg="green")

@cli.command()
@click.argument("path", type=click.Path(exists=True, file_okay=False))
@click.option("--tag", "-t", help="Optional image tag (default: emergence/<folder>:latest)")
def build(path: str, tag: str | None):
    """
    Build a Docker image from an agent folder.
    """
    folder = pathlib.Path(path).resolve()
    img_tag = tag or f"emergence/{folder.name}:latest"

    click.echo(f"🔨  Building {img_tag} ...")
    try:
        subprocess.run(
            ["docker", "build", "-t", img_tag, str(folder)],
            check=True,
        )
        click.secho(f"✅  Image built: {img_tag}", fg="green")
    except subprocess.CalledProcessError:
        click.secho("⛔  Docker build failed.", fg="red")
        raise SystemExit(1)

@cli.command()
@click.option("--local", "use_local", is_flag=True, help="Push to a registry on localhost")
@click.option("--port", default=5000, show_default=True, help="Port of the local registry")
@click.argument("path", type=click.Path(exists=True, file_okay=False))
def publish(path: str, use_local: bool, port: int):
    """
    Publish an agent’s Docker image.
    """
    folder = pathlib.Path(path).resolve()
    base_tag = f"emergence/{folder.name}:latest"

    if use_local:
        dest_tag = f"localhost:{port}/{folder.name}:latest"
        click.echo(f"📦  Retagging {base_tag} → {dest_tag}")
        try:
            subprocess.run(["docker", "tag", base_tag, dest_tag], check=True)
            click.echo(f"⬆️   Pushing → {dest_tag}")
            subprocess.run(["docker", "push", dest_tag], check=True)
            click.secho("✅  Pushed to local registry!", fg="green")

            # ---- directory ping -----------------------------------------
            try:
                r = requests.post(
                    "http://127.0.0.1:8000/agents",
                    json={"name": folder.name, "image": dest_tag},
                    timeout=3,
                )
                if r.ok:
                    click.secho("🔖  Registered with local directory", fg="green")
                else:
                    click.secho("⚠️  Directory registration failed", fg="yellow")
            except Exception:
                click.secho("⚠️  Directory service unreachable", fg="yellow")

        except subprocess.CalledProcessError:
            click.secho("⛔  Push failed. Is registry running?", fg="red")
            raise SystemExit(1)
    else:
        click.secho("Remote publish not implemented yet.", fg="yellow")

# ─────────────────────────────────────────────────────────
# NEW: `emergence directory list`
# ─────────────────────────────────────────────────────────

@cli.group()
def directory():
    """Interact with the local agent directory."""
    pass

@directory.command("list")
def dir_list():
    """List registered agents."""
    try:
        r = requests.get("http://127.0.0.1:8000/agents", timeout=3)
        for a in r.json():
            click.echo(f"{a['name']:15} → {a['image']}")
    except Exception:
        click.secho("Directory unavailable at http://127.0.0.1:8000", fg="red")
